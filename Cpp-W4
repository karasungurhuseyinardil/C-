ANALYSIS OF ALGORITHMS

	O(1) 

#include<iostream> 
using namespace std;
int main()
{
	cout << "Hello World \n";
	system("pause");
	return 0;
}
	O(n) 

// Here c is a positive integer constant   
	for (int i = 1; i <= n; i += c) 
	 {
		// some O(1) expressions
    }

	for (int i = n; i > 0; i -= c) 
    {
		// some O(1) expressions
	 }

	#include<iostream> 
	using namespace std;
	int main()
	{
		int i, n = 8;
		for (i = 1; i <= n; i++)
		{
			cout << "Hello World \n";
		}
		system("pause");
		return 0;
	}

	O(n2) 

// Here c is a positive integer constant   
for (int i = 1; i <= n; i += c) 
{ 
	for (int j = 1; j <= n; j += c)  
		{
			// some O(1) expressions
		}
	}
	

for (int i = n; i > 0; i -= c)
	{
	for (int j = i - 1; j <= n; j += c)
		{
			// some O(1) expressions
	}

#include <iostream>
using namespace std;
int main()
{
	int n = 3;
	// loop through rows
	for (int i = 1; i <= n; i++) {
		// loop through columns
		for (int j = 1; j <= n; j++) 
		{
			cout << i * j << " ";
		}
		cout << endl;
	}
	system("pause");
	return 0;
}


//// Finding the maximum element in an array using O(n^2) algorithm
#include <iostream>
using namespace std;
int main()
{
	int arr[] = { 5, 7, 3, 8, 2, 9 }; // Example array
	int n = sizeof(arr) / sizeof(arr[0]);
	int max_element = arr[0]; 
	 //Initialize the maximum element to the first element of the array
		for (int i = 0; i < n; i++) { // Loop through the array
		   for (int j = i + 1; j < n; j++) { 
			 //Compare each element with the rest of the elements
			if (arr[j] > max_element) { 
				 //If a greater element is found, update the maximum element
				max_element = arr[j];
			}
		}
	}
	cout << "The maximum element in the array is: " << max_element << endl;
	system("pause");
	return 0;
}

///// Bubble sort algorithm to sort an array in ascending order
#include <iostream>
using namespace std;

int main()
{
	int arr[] = { 5, 7, 3, 8, 2, 9 }; // Example array
	int n = sizeof(arr) / sizeof(arr[0]);

	// Bubble sort algorithm
	for (int i = 0; i < n - 1; i++) 
{ 
		// Loop through the array
	for (int j = 0; j < n - i - 1; j++) 
{ 
// Compare each element with the next element
			if (arr[j] > arr[j + 1])
 {
// If the next element is smaller, swap them
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}

	cout << "The sorted array in ascending order is: ";
	for (int i = 0; i < n; i++)
   {
		cout << arr[i] << " ";
	}
	cout << endl;
	system("pause");
	return 0;
}







	O(logn) 

///// Binary search algorithm to find an element in a sorted array
#include <iostream>
using namespace std;

int binarySearch(int arr[], int left, int right, int x) {
	while (left <= right) 
	{
 int mid = left + (right - left) / 2;

		if (arr[mid] == x) { 
		// If the middle element is the target element, return its index
			return mid;
		}   

		if (arr[mid] < x) {
// If the target element is greater than the middle element,
			//search in the right half
			left = mid + 1;
		}

		else { 
			
// If the target element is smaller than the middle element,
	//search in the left half
			right = mid - 1;
		}
	}

	return -1; // If the target element is not found, return -1
} 

int main()
{
	int arr[] = { 2, 3, 5, 7, 8, 9 }; // Example sorted array
	int n = sizeof(arr) / sizeof(arr[0]);
	int target = 5;

	int index = binarySearch(arr, 0, n - 1, target);

	if (index == -1) {
		cout << "Target element not found in the array" << endl;
	}	else {
	cout << "Target element found at index: " << index << endl;
	}
	system("pause");
	return 0;
}
	 O(m*n)
#include <iostream>
using namespace std;
int main() {
	int m, n;
	cout << "Enter two integers: ";
	cin >> m >> n;
	for (int i = 0; i < m; i++)
     { //m times
	   for (int j = 0; j < n; j++) 
       { // n times 
			cout << i * j << " "; 
		 }
		cout << endl;
	}
	system("pause");
	return 0;
}

	O(2n) 

#include <iostream>
using namespace std;
int recursiveFunction(int n) {
	if (n == 0) {
		return 1;
	}
	else {
		return recursiveFunction(n - 1) + recursiveFunction(n - 1);
	}
}
int main() {
	int n = 10;
	int result = recursiveFunction(n);
	cout << "Result: " << result << endl;
	system("pause");
	return 0;
}


#include <iostream>
using namespace std;
int fibonacci(int n) {
	if (n <= 1) 
  {
		return n;
	}
	else 
  {
    return fibonacci(n - 1) + fibonacci(n - 2);
	}
}
int main() { 
	int n = 10;
	int result = fibonacci(n);
   cout << "The " << n << "th Fibonacci number is: " << result <<endl;
  //1, 1, 2, 3, 5, 8, 13, 21, 34, 55 
   system("pause");
	return 0;
}

STORING GAME ENTRIES IN AN ARRAY 

#include <iostream>
#include <string>
using namespace std;
#define MAX_ENTRIES 100

class GameEntry {
public:
	GameEntry() {
		m_name = "";
		m_score = 0;
	}

	GameEntry(const string& name, int score) {
		m_name = name;
		m_score = score;
	}

	const string& getName() const {
		return m_name;
	}

	int getScore() const {
		return m_score;
	}

private:
	string m_name;
	int m_score;
};

class Scoreboard {
public:
	Scoreboard() {
		m_entries = new GameEntry[MAX_ENTRIES];
		m_numEntries = 0;
		m_capacity = MAX_ENTRIES;
	}

	~Scoreboard() {
		delete[] m_entries;
	}

	void addEntry(const string& name, int score)
	{
		if (m_numEntries >= m_capacity) 
		{
			expandCapacity();
		}
		int i = m_numEntries - 1;
		while (i >= 0 && score > m_entries[i].getScore()) 
		{
			m_entries[i + 1] = m_entries[i];
			i--;
		}
		m_entries[i + 1] = GameEntry(name, score);
		m_numEntries++;
	}

	void removeEntry(int index) {
		if (index < 0 || index >= m_numEntries) {
			throw out_of_range("Index out of range.");
		}
		for (int i = index; i < m_numEntries - 1; i++)
		{
			m_entries[i] = m_entries[i + 1];
		}
		m_numEntries--;
	}

	GameEntry& operator[](int index) {
		if (index < 0 || index >= m_numEntries) {
			throw out_of_range("Index out of range.");
		}
		return m_entries[index];
	}

	int size() const {
		return m_numEntries;
	}

private:
	GameEntry* m_entries;
	int m_numEntries;
	int m_capacity;

	void expandCapacity() 
	{
		m_capacity *= 2;
		GameEntry* newEntries = new GameEntry[m_capacity];
		for (int i = 0; i < m_numEntries; i++) 
		{
			newEntries[i] = m_entries[i];
		}
		delete[] m_entries;
		m_entries = newEntries;
	}
};

int main() {
	Scoreboard scoreboard;

	// Add some entries to the scoreboard
	scoreboard.addEntry("Arda", 100);
	scoreboard.addEntry("Berna", 200);
	scoreboard.addEntry("Cemal", 300);
	scoreboard.addEntry("Doruk", 150);
	scoreboard.addEntry("Emre", 250);

	// Print the entries in the scoreboard
	cout << "Scoreboard:" << endl;
	for (int i = 0; i < scoreboard.size(); i++) {
cout << scoreboard[i].getName() << " : " << scoreboard[i].getScore() << endl;
	}

	// Remove an entry from the scoreboard
	scoreboard.removeEntry(2);	

	// Print the entries in the scoreboard again
	cout << "Scoreboard after removing entry:" << endl;
for (int i = 0; i < scoreboard.size(); i++) {
cout << scoreboard[i].getName() << " : " << scoreboard[i].getScore() << endl;
	}
	system("pause");
	return 0;
}
