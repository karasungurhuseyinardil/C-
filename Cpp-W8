//// C++ code that implements a stack using a generic linked list:
#include <iostream>
using namespace std;

template <class T>
class Node {
public:
	T data;
	Node<T>* next;

	Node(T d) 
	{
		data = d;
		next = NULL;
	}
};

template <class T>
class Stack {
private:
	Node<T>* top;

public:
	Stack() {
		top = NULL;
	}

	void push(T value) {
		Node<T>* newNode = new Node<T>(value);
		if (top == NULL) {
			top = newNode;
		}
		else {
			newNode->next = top;
			top = newNode;
		}
	}

	void pop() {
		if (top == NULL) {
			cout << "Stack is empty" << endl;
			return;
		}
		Node<T>* temp = top;
		top = top->next;
		delete temp;
	}

	T peek() {
		if (top == NULL) {
			cout << "Stack is empty" << endl;
			return NULL;
		}
		return top->data;
	}

	bool isEmpty() {
		return top == NULL;
	}

	void printStack() {
		Node<T>* current = top;
		while (current != NULL)
		{
			cout << current->data << " ";
			current = current->next;
		}
		cout << endl;
	}
};

int main() {
	Stack<int> myStack;
	myStack.push(5);
	myStack.push(10);
	myStack.push(15);
	myStack.printStack();

	myStack.pop();
	myStack.printStack();

	cout << "Top element: " << myStack.peek() << endl;
	cout << "Is the stack empty? " << myStack.isEmpty() << endl;
	system("pause");
	return 0;
}



//// CHECK PARENTHESES - HTML TAGS

#include <iostream>
#include <stack>
#include <string>

using namespace std;

bool checkParentheses(string str) {
	stack<char> s;
	for (int i = 0; i < str.length(); i++) {
		if (str[i] == '(' || str[i] == '[' || str[i] == '{') {
			s.push(str[i]);
		}
		else if (str[i] == ')' || str[i] == ']' || str[i] == '}')
		{
			if (s.empty()) {
				return false;
			}
			char top = s.top();
			if ((top == '(' && str[i] == ')') || 
				(top == '[' && str[i] == ']') || 
				(top == '{' && str[i] == '}')) 
			{
				s.pop();
			}
			else {
				return false;
			}
		}
	}
	return s.empty();
}

bool checkHTMLTags(string str) {
	stack<string> s;
	int i = 0;
	while (i < str.length())
	{
		if (str[i] == '<')
		{
			int j = str.find(">", i);
			if (j == string::npos) {
				return false;
			}
			string tag = str.substr(i, j - i + 1);
			if (tag[1] == '/')
			{
				if (s.empty()) {
					return false;
				}
				if (tag.substr(2, tag.length() - 3) != s.top()) {
					return false;
				}
				s.pop();
			}
			else {
				s.push(tag.substr(1, tag.length() - 2));
			}
			i = j + 1;
		}
		else {
			i++;
		}
	}
	return s.empty();
}

int main() {
	string parentheses1 = "((()))";
	string parentheses2 = "(()))";
	string htmlTags1 = "<html><head><title>My Website</title></head><body><h1>Welcome to my website!</h1></body></html>";
	string htmlTags2 = "<html><head><title>My Website</title></body></html>";

	cout << "Matching parentheses for " << parentheses1 << ": " << checkParentheses(parentheses1) << endl;
	cout << "Matching parentheses for " << parentheses2 << ": " << checkParentheses(parentheses2) << endl;
	cout << "Matching HTML tags for " << htmlTags1 << ": " << checkHTMLTags(htmlTags1) << endl;
	cout << "Matching HTML tags for " << htmlTags2 << ": " << checkHTMLTags(htmlTags2) << endl;
	system("pause");
	return 0;
}


////// REVERSE VECTOR 

#include <iostream>
#include <stack>
#include <vector>
using namespace std;

void reverseVector(vector<int>& v) {
	stack<int> s;
	for (int i = 0; i < v.size(); i++) {
		s.push(v[i]);
	}
	for (int i = 0; i < v.size(); i++) 
	{
		v[i] = s.top();
		s.pop();
	}
}

int  main() {
	vector<int> myVector = { 1, 2, 3, 4, 5 };
	reverseVector(myVector);
	for (int i = 0; i < myVector.size(); i++) {
		cout << myVector[i] << " ";
	}
	cout << endl;
	system("pause");
	return 0;
}




/////// TRAVERSAL PREORDER INORDER POSTORDER
#include <iostream>
#include <stack>
using namespace std;

// Definition for a binary tree node
struct Node {
	int data;
	Node* left;
	Node* right;
	Node(int val) 
	{
		data = val;
		left = right = NULL;
	}
};

// Function to perform iterative inorder traversal of a binary tree using a stack
void inorderTraversal(Node* root) {
	stack<Node*> st;
	Node* curr = root;

	while (curr != NULL || !st.empty()) 
	{
		while (curr != NULL)
		{
			st.push(curr);
			curr = curr->left;
		}
		curr = st.top();
		st.pop();
		cout << curr->data << " ";
		curr = curr->right;
	}
}

// Function to perform iterative preorder traversal of a binary tree using a stack
void preorderTraversal(Node* root) {
	if (root == NULL)
		return;

	stack<Node*> st;
	st.push(root);

	while (!st.empty()) {
		Node* curr = st.top();
		st.pop();
		cout << curr->data << " ";
		if (curr->right)
			st.push(curr->right);
		if (curr->left)
			st.push(curr->left);
	}
}

// Function to perform iterative postorder traversal of a binary tree using two stacks
void postorderTraversal(Node* root) {
	if (root == NULL)
		return;

	stack<Node*> st1, st2;
	st1.push(root);
	while (!st1.empty()) {
		Node* curr = st1.top();
		st1.pop();
		st2.push(curr);

		if (curr->left)
			st1.push(curr->left);
		if (curr->right)
			st1.push(curr->right);
	}
	while (!st2.empty()) 
	{
		cout << st2.top()->data << " ";
		st2.pop();
	}
}

// Driver code
int main() {
	Node* root = new Node(1);     
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(4);
	root->left->right = new Node(5);

	cout << "Inorder Traversal: ";
	inorderTraversal(root);
	cout << endl;

	cout << "Preorder Traversal: ";
	preorderTraversal(root);
	cout << endl;

	cout << "Postorder Traversal: ";
	postorderTraversal(root);
	cout << endl;
	system("pause");
	return 0;
}


//// QUEUE using Array
#include <iostream>
using namespace std;
int queue[100], n = 100, front = -1, rear = -1;

void Insert() 
{
	int val;
	if (rear == n - 1)
		cout << "Queue Overflow" << endl;
	else {
		if (front == -1)
			front = 0;
		cout << "Insert the element in queue : " << endl;
		cin >> val;
		rear++;
		queue[rear] = val;
	}
}



void Delete() 
{
	if (front == -1 || front > rear) 
	{
		cout << "Queue Underflow ";
		return;
	}
	else {
		cout << "Element deleted from queue is : " << queue[front] << endl;
		front++;
	}
}

void Display() {
	if (front == -1 || front > rear)
		cout << "Queue is empty" << endl;
	else {
		cout << "Queue elements are : ";
		
		for (int i = front; i <= rear; i++)
			cout << queue[i] << " ";
		
		cout << endl;
	}
}


int main() {
	int ch;
	cout << "1) Insert element to queue" << endl;
	cout << "2) Delete element from queue" << endl;
	cout << "3) Display all the elements of queue" << endl;
	cout << "4) Exit" << endl;
	do {
		cout << "Enter your choice : " << endl;
		cin >> ch;
		switch (ch) {
		case 1: Insert();
			break;
		case 2: Delete();
			break;
		case 3: Display();
			break;
		case 4: cout << "Exit" << endl;
			break;
		default: cout << "Invalid choice" << endl;
		}
	} while (ch != 4);
	system("pause");
	return 0;
}
