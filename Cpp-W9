////  QUEUE CIRCULAR LINKED LIST
#include <iostream>
using namespace std;

class Node {
public:
	int data;
	Node* next;
};

class Queue {
private:
	Node* rear;
	Node* front;
public:
	Queue() {
		rear = NULL;
		front = NULL;
	}
	
	void enqueue(int data) {
		Node* temp = new Node;
		temp->data = data;
		if (front == NULL)
			front = temp;
		else
			rear->next = temp;
		rear = temp;
		rear->next = front;
	}
	void dequeue() {
		if (front == NULL) {
			cout << "Queue is empty!" << endl;
			return;
		}
		if (front == rear) {
			delete front;
			front = NULL;
			rear = NULL;
		}
		else {
			Node* temp = front;
			front = front->next;
			rear->next = front;
			delete temp;
		}
	}



	void display() {
		if (front == NULL) {
			cout << "Queue is empty!" << endl;
			return;
		}
		Node* temp = front;
		cout << "Queue elements are: ";
		do {
			cout << temp->data << " ";
			temp = temp->next;
		} while (temp != front);
		cout << endl;
	}
};
int main() {
	Queue q;
	q.enqueue(10);
	q.enqueue(20);
	q.enqueue(30);
	q.enqueue(40);
	q.display();
	q.dequeue();
	q.dequeue();
	q.display();
	system("pause");
	return 0;
}


/////  DEQUE
#include <iostream>
#include <deque>
using namespace std;

void printDeque(deque<int> dq) {
	cout << "Deque elements are: ";
	for (auto it = dq.begin(); it != dq.end(); ++it)
		cout << *it << " ";
	cout << endl;
}

int main() {
	deque<int> dq;

	//// Add elements to the front and back of the deque
	dq.push_front(10);
	dq.push_back(20);
	dq.push_front(5);
	dq.push_back(15);
	printDeque(dq);

	//// Remove elements from the front and back of the deque
	dq.pop_front();
	dq.pop_back();
	printDeque(dq);

	//// Access elements in the deque
	cout << "Element at index 1: " << dq.at(1) << endl;
	cout << "First element: " << dq.front() << endl;
	cout << "Last element: " << dq.back() << endl;

	//// Insert and erase elements at a specific position in the deque
	auto it = dq.begin() + 2;
	dq.insert(it, 25);
	printDeque(dq);
	it = dq.begin() + 1;
	dq.erase(it);
	printDeque(dq);

	//// Clear the deque
	dq.clear();
	printDeque(dq);

	system("pause");
	return 0;
}


//// DEQUE USING DOUBLY-LINKED LIST
#include <iostream>
using namespace std;

class Node {
public:
	int data;
	Node* next;
	Node* prev;
};

class Deque {
private:
	Node* front;
	Node* rear;
public:
	Deque() {
		front = nullptr;
		rear = nullptr;
	}

	bool isEmpty()
	{
		return (front == nullptr);
	}

	void insertFront(int x) {
		Node* newNode = new Node;
		newNode->data = x;
		newNode->next = front;
		newNode->prev = nullptr;

		if (front != nullptr) 
		{
			front->prev = newNode;
		}
		front = newNode;
		if (rear == nullptr) 
		{
			rear = front;
		}	
	}

	void insertRear(int x) {
		Node* newNode = new Node;
		newNode->data = x;
		newNode->next = nullptr;
		newNode->prev = rear;
		if (rear != nullptr) 
		{
			rear->next = newNode;
		}
		rear = newNode;
		if (front == nullptr) 
		{
			front = rear;
		}
	}
		
	void deleteFront() 
	{
		if (isEmpty()) 
		{
			cout << "Deque is empty" << endl;
		}		
		else 
		{
			Node* temp = front;
			front = front->next;
			if (front == nullptr)
			{			
				rear = nullptr; 	
			}
			else 
			{
				front->prev = nullptr;		
			}
			delete temp; 
		}	
	}


	void deleteRear() {
		if (isEmpty()) 
		{
			cout << "Deque is empty" << endl;
		}		
		else 
		{
			Node* temp = rear;
			rear = rear->prev;
			if (rear == nullptr) 
			{
				front = nullptr;
			}		
			else 
			{
				rear->next = nullptr;
			}
			delete temp;
		}
	}

	void display() {
		if (isEmpty()) {
			cout << "Deque is empty" << endl;
		}
		else {
			Node* temp = front;
			while (temp != nullptr) 
			{
				cout << temp->data << " ";
				temp = temp->next;
			}
			cout << endl;
		}
	}
};

int main() {
	Deque dq;

	dq.insertFront(10);
	dq.insertRear(20);
    dq.insertFront(5);
	dq.insertRear(15);
	dq.display();

	dq.deleteFront();
    dq.deleteRear();
	dq.display();

	dq.insertFront(25);
	dq.insertRear(30);
	dq.display();
	system("pause");
	return 0;
}


//// QUEUE ADAPTER
#include <iostream>
#include <queue>
using namespace std;

template<typename T>
class QueueAdapter {
private:
	queue<T> q;
public:
	void enqueue(T data) {
		q.push(data);
	}
	void dequeue() {
		if (q.empty()) {
			cout << "Queue is empty!" << endl;
		}
		else {
			q.pop();
		}
	}

	T front() {
		if (q.empty()) {
			cout << "Queue is empty!" << endl;
			return T();
		}
		else {
			return q.front();
		}
	}

	T back() {
		if (q.empty()) {
			cout << "Queue is empty!" << endl;
			return T();
		}
		else {
			return q.back();
		}
	}

	bool isEmpty() {
		return q.empty();
	}
};

int main() {
	QueueAdapter<int> q;
	q.enqueue(10);  
	q.enqueue(20); 
	q.enqueue(30);
	q.enqueue(40);
	cout << "Front element: " << q.front() << endl;
	cout << "Back element: " << q.back() << endl;
	q.dequeue(); 
	q.dequeue();
	cout << "Front element: " << q.front() << endl;
	cout << "Is queue empty? " << (q.isEmpty() ? "Yes" : "No") << endl;
	q.dequeue(); 
	q.dequeue();
	cout << "Is queue empty? " << (q.isEmpty() ? "Yes" : "No") << endl;
	system("pause");
	return 0;
}



//// STACK ADAPTER
#include <iostream>
#include <stack>
using namespace std;

template <typename T>
class StackAdapter {
private:
	stack<T> stack;
public:
	bool empty() const {
		return stack.empty();
	}

	size_t size() const {
		return stack.size();
	}

	T& top() {
		return stack.top();
	}

	const T& top() const {
		return stack.top();
	}

	void push(const T& value) {
		stack.push(value);
	}

	void pop() {
		stack.pop();
	}
};

int main() {
	StackAdapter<int> myStack;
	myStack.push(10);
	myStack.push(20);
	myStack.push(30);  
	
	cout << "Size of stack : " << myStack.size() << endl;
	cout << "Top element: " << myStack.top() << endl;
	myStack.pop(); 
	cout << "Top element: " << myStack.top() << endl; 

	while (!myStack.empty()) {
		cout << myStack.top() << " "; 
		myStack.pop();
	}
	
	cout << "\nSize of stack : " << myStack.size() << endl;
	
	system("pause");
	return 0;
}
