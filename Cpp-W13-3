//// 3- 2-3-4 TREES 
//// UPDATED PROGRAM
#include <iostream>
using namespace std;

class TreeNode {
private:
	int* keys;
	TreeNode** childPtr;
	bool isLeaf;
	int numKeys;
public:
	TreeNode();
	void insertNonFull(int k);
	void splitChild(int i, TreeNode* y);
	void traverse();
	TreeNode* search(int k);
	friend class Tree;
};

class Tree {
private:
	TreeNode* root;
public:
	Tree();
	void insert(int k);
	void traverse() { root->traverse(); }
	TreeNode* search(int k) { return root->search(k); }
};

TreeNode::TreeNode() {
	keys = new int[3];
	childPtr = new TreeNode *[4];
	isLeaf = true;
	numKeys = 0;
}

void TreeNode::insertNonFull(int k) {
	int i = numKeys - 1;
	if (isLeaf == true) 
	{
		while (i >= 0 && keys[i] > k) {
			keys[i + 1] = keys[i];
			i--;
		}
		keys[i + 1] = k;
		numKeys = numKeys + 1;
	}
	else {
		while (i >= 0 && keys[i] > k)
			i--;
		if (childPtr[i + 1]->numKeys == 3) 
		{
			splitChild(i + 1, childPtr[i + 1]);
			if (keys[i + 1] < k)
				i++;
		}
		childPtr[i + 1]->insertNonFull(k);
	}
}

void TreeNode::splitChild(int i, TreeNode* y) 
{
	TreeNode* z = new TreeNode();
	z->isLeaf = y->isLeaf;
	z->numKeys = 1;
	z->keys[0] = y->keys[2];

	if (y->isLeaf == false) 
	{
		for (int j = 0; j < 2; j++)

			z->childPtr[j] = y->childPtr[j + 3];
	}

	y->numKeys = 1;

	for (int j = numKeys; j >= i + 1; j--)
		childPtr[j + 1] = childPtr[j];

	childPtr[i + 1] = z;

	for (int j = numKeys - 1; j >= i; j--)
		keys[j + 1] = keys[j];

	keys[i] = y->keys[1];
	numKeys = numKeys + 1;
}

void TreeNode::traverse() {
	int i;
	for (i = 0; i < numKeys; i++) 
	{
		if (isLeaf == false)
			childPtr[i]->traverse();
		cout << " " << keys[i];
	}

	if (isLeaf == false)
		childPtr[i]->traverse();
}

TreeNode* TreeNode::search(int k) {
	int i = 0;
	while (i < numKeys && k > keys[i])
		i++;

	if (keys[i] == k)
		return this;

	if (isLeaf == true)
		return NULL;

	return childPtr[i]->search(k);
}

Tree::Tree() {
	root = NULL;
}

void Tree::insert(int k) 
{
	if (root == NULL) {
		root = new TreeNode();
		root->keys[0] = k;
		root->numKeys = 1;
	}
	else {
		if (root->numKeys == 3) 
		{
			TreeNode* s = new TreeNode();
			s->childPtr[0] = root;
			s->isLeaf = false;
			s->numKeys = 0;
			s->splitChild(0, root);
			int i = 0;

			if (s->keys[0] < k)
				i++;
			s->childPtr[i]->insertNonFull(k);
			root = s;
		}
		else {
			root->insertNonFull(k);
		}
	}
}

int main() {
	Tree tree;

	tree.insert(7);  
	tree.insert(3);
	tree.insert(18);
	tree.insert(10);
	tree.insert(22);
	tree.insert(8);
	tree.insert(11);
	tree.insert(26);
	tree.insert(2);
	tree.insert(6);
	tree.insert(13);

	cout << "Traversal of constructed 2-3-4 tree: ";
	tree.traverse();
	cout << endl;

	TreeNode* searchResult = tree.search(6);
	if (searchResult != NULL)
		cout << "Key 6 found in the tree." << endl;
	else
		cout << "Key 6 not found in the tree." << endl;
	system("pause");
	return 0;
}
