//////////////// 4- Heap Sort
#include <iostream>
using namespace std;

// Function to heapify a subtree rooted at index 'root'
void heapify(int arr[], int size, int root) {
	int largest = root;         // Initialize largest as root
	int left = 2 * root + 1;    // Left child
	int right = 2 * root + 2;   // Right child

	// If left child is larger than root
	if (left < size && arr[left] > arr[largest])
		largest = left;

	// If right child is larger than largest so far
	if (right < size && arr[right] > arr[largest])
		largest = right;

	// If largest is not root
	if (largest != root) {
		swap(arr[root], arr[largest]);

		// Recursively heapify the affected sub-tree
		heapify(arr, size, largest);
	}
}

// Main function to perform heap sort
void heapSort(int arr[], int size) {
	// Build the heap (rearrange the array)
	for (int i = size / 2 - 1; i >= 0; i--)
		heapify(arr, size, i);

	// One by one extract an element from the heap
	for (int i = size - 1; i > 0; i--)
	{
		// Move current root to end
		swap(arr[0], arr[i]);

		// Call max heapify on the reduced heap
		heapify(arr, i, 0);
	}
}

// Function to print an array
void printArray(int arr[], int size) 
{
	for (int i = 0; i < size; i++)
		cout << arr[i] << " ";
	cout << endl;
}

int main() {
	int arr[] = { 12, 11, 13, 5, 6, 7 };
	int size = sizeof(arr) / sizeof(arr[0]);

	cout << "Original array: ";
	printArray(arr, size);

	heapSort(arr, size);

	cout << "Sorted array: ";
	printArray(arr, size);
	system("pause");
	return 0;
}
